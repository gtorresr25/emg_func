<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="5:vk52V0?62*NeYRIVzA">winsize</variable><variable id="gJwz%Zf^:Mabaf?}S[}d">index</variable><variable id="n)@{$o$]r;HC@w28{yE.">EMG_code</variable><variable id="R8+59R27GsHGV}$8%|wm">list</variable></variables><comment id="d9}3JHiFDJ@I:D(Sg6K%" data="0" x="0" y="0" h="120" w="480">Use this file to define custom functions and blocks.

Read more at https://makecode.microbit.org/blocks/custom</comment><block type="pxt-on-start" id="#S|y!a!gsnO7a~f#2RiK" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" id="#i^;,/REmBCah(yL.5aH" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let EMG_code = 0" numlines="1" declaredvars="EMG_code"></mutation><next><block type="typescript_statement" id="MNj6Zz-RBSBKYAn_QM|3" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let list: number[] = []" numlines="1" declaredvars="list"></mutation><next><block type="typescript_statement" id="c-3V(.{!f?oy*@1F0xXu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let sum = 0" numlines="1" declaredvars="sum"></mutation><next><block type="typescript_statement" id="G{{t*Yi9c4Xv}ls5mZJc" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ave = 0" numlines="1" declaredvars="ave"></mutation><next><block type="variables_set" id="@/nWM]GdeQvjXnM/#G{e"><field name="VAR" id="5:vk52V0?62*NeYRIVzA">winsize</field><value name="VALUE"><shadow type="math_number" id="8rW@oI[K}+$/d@;HCajB"><field name="NUM">15</field></shadow></value><next><block type="pxt_controls_for" id="J=Gal??*N~vKY=?T{y-j"><value name="VAR"><shadow type="variables_get_reporter" id="KgPSYt8fg$M3=wkiHlFl"><field name="VAR" id="gJwz%Zf^:Mabaf?}S[}d">index</field></shadow></value><value name="TO"><shadow type="math_whole_number"><field name="NUM">0</field></shadow><block type="variables_get" id="jdC({olMqbUo}Ek37z!:"><field name="VAR" id="5:vk52V0?62*NeYRIVzA">winsize</field></block></value><statement name="DO"><block type="variables_set" id="nTN6e!njh;5bg-/I!Y?^"><field name="VAR" id="n)@{$o$]r;HC@w28{yE.">EMG_code</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="device_get_analog_pin" id="B:pyyXPjru#tFC:`6-4H"><field name="name">AnalogPin.P3</field></block></value><next><block type="array_push" id="|-Q5*VG:ii`ukfME++_Q"><value name="list"><block type="variables_get" id="slc+~2#nxvzJ.D$Y5fhi"><field name="VAR" id="R8+59R27GsHGV}$8%|wm">list</field></block></value><value name="value"><block type="variables_get" id="nh]%h#d/4)%8DdGL2lsj"><field name="VAR" id="n)@{$o$]r;HC@w28{yE.">EMG_code</field></block></value></block></next></block></statement><next><block type="typescript_statement" id="2uEIyK(TVJ#S4os8VV/r" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace custom2 {" line1="    /**" line2="     * Use dynamic average window to filter EMG_code signal from Pin P3" line3="     */" line4="    //% block=&quot;EMG_filtered&quot;" line5="    export function EmgFilter(pin_name: AnalogPin): number {" line6="        // Add code here" line7="" line8="        EMG_code = pins.analogReadPin(pin_name)" line9="        list.unshift(EMG_code)" line10="        list.removeAt(winsize)" line11="        sum = 0" line12="        for (let index2 = 0; index2 &lt;= winsize; index2++) {" line13="            sum = sum + list[index2]" line14="        }" line15="        ave = sum / winsize" line16="        return ave" line17="    }" line18="}" numlines="19"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>